一、下拉刷新，上拉加载库
1.布局文件最外层需调用<digiwin.pulltorefreshlibrary.loadrefresh.SwipeToLoadLayout/>

2.自定义的下拉刷新header布局需实现SwipeLoadMoreFooterLayout类，已封装好ClassicLoadMoreFooterView类，
  只需布局中最外层调用<digiwin.pulltorefreshlibrary.headerandfooter.DgwRefreshHeaderView/>即可

3.自定义的上拉加载更多布局需实现SwipeTrigger, SwipeRefreshTrigger 接口，已封装好DgwRefreshHeaderView类，
  只需布局最外层调用<digiwin.pulltorefreshlibrary.headerandfooter.ClassicLoadMoreFooterView/>即可

4.activity需实现OnRefreshListener, OnLoadMoreListener接口，重写onRefresh，onLoadMore方法，在其中实现
  相关逻辑操作即可

二、RecyclerView侧滑删除
   /**
     * 菜单创建器。在Item要创建菜单的时候调用。
     */
    private SwipeMenuCreator swipeMenuCreator = new SwipeMenuCreator() {
        @Override
        public void onCreateMenu(SwipeMenu swipeLeftMenu, SwipeMenu swipeRightMenu, int viewType) {
            int width = getResources().getDimensionPixelSize(R.dimen.item_height);
            // MATCH_PARENT 自适应高度，保持和内容一样高；也可以指定菜单具体高度，也可以用WRAP_CONTENT。
            int height = ViewGroup.LayoutParams.MATCH_PARENT;

                SwipeMenuItem deleteItem = new SwipeMenuItem(mContext)
                        .setBackgroundDrawable(R.drawable.selector_red)
                        .setImage(R.mipmap.ic_action_delete)
                        .setText("删除") // 文字，还可以设置文字颜色，大小等。。
                        .setTextColor(Color.WHITE)
                        .setWidth(width)
                        .setHeight(height);
                swipeRightMenu.addMenuItem(deleteItem);// 添加一个按钮到右侧侧菜单。
        }
    };
     /**
         * 菜单点击监听。
         */
        private OnSwipeMenuItemClickListener menuItemClickListener = new OnSwipeMenuItemClickListener() {
            @Override
            public void onItemClick(Closeable closeable, int adapterPosition, int menuPosition, int direction) {
                closeable.smoothCloseMenu();// 关闭被点击的菜单。

                // TODO 推荐调用Adapter.notifyItemRemoved(position)，也可以Adapter.notifyDataSetChanged();
                if (menuPosition == 0) {// 删除按钮被点击。
                    mStrings.remove(adapterPosition);
                    mBaseSwipeMenuAdapter.notifyItemRemoved(adapterPosition);
                }
            }
        };
         mSwipeMenuRecyclerView.setLayoutManager(new LinearLayoutManager(this));// 布局管理器。
                mSwipeMenuRecyclerView.setHasFixedSize(true);// 如果Item够简单，高度是确定的，打开FixSize将提高性能。
                mSwipeMenuRecyclerView.setItemAnimator(new DefaultItemAnimator());// 设置Item默认动画，加也行，不加也行。
                // 为SwipeRecyclerView的Item创建菜单就两句话，不错就是这么简单：
                // 设置菜单Item点击监听。
                mSwipeMenuRecyclerView.setSwipeMenuItemClickListener(menuItemClickListener);
                // 设置菜单创建器。
                mSwipeMenuRecyclerView.setSwipeMenuCreator(swipeMenuCreator);
                mBaseSwipeMenuAdapter = new BaseSwipeMenuAdapter<String>(this,mStrings){

                    @Override
                    protected int getItemLayout(int viewType) {
                        return R.layout.item;
                    }

                    @Override
                    protected void bindData(RecyclerViewHolder holder, int position, String item) {
                        holder.setText(R.id.tv_title,item);
                    }
                };

